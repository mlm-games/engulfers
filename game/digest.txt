Directory structure:
└── game/
    ├── resources/
    │   ├── reusable_anims.tres
    │   ├── void_particle.tres
    │   ├── void_particle_base.tres
    │   ├── void_shooter_particles.tres
    │   └── void_trail_particles.tres
    ├── scenes/
    │   ├── base_entity.gd
    │   ├── base_entity.gd.uid
    │   ├── base_entity.tscn
    │   ├── base_void_entity.gd
    │   ├── base_void_entity.gd.uid
    │   ├── particle_shooter_component.tscn
    │   ├── particle_trail.tscn
    │   ├── player.gd
    │   ├── player.gd.uid
    │   ├── player.tscn
    │   ├── test-arena-tileset.tres
    │   ├── test-world.tscn
    │   ├── void_hunter.gd
    │   ├── void_hunter.gd.uid
    │   ├── void_keeper.gd
    │   ├── void_keeper.gd.uid
    │   ├── void_keeper.tscn
    │   ├── void_liner.gd
    │   ├── void_liner.gd.uid
    │   ├── void_liner.tscn
    │   ├── void_master.gd
    │   ├── void_master.gd.uid
    │   ├── void_mimic.gd
    │   ├── void_mimic.gd.uid
    │   ├── void_particle_component.gd
    │   ├── void_particle_component.gd.uid
    │   ├── void_watcher.gd
    │   ├── void_watcher.gd.uid
    │   ├── components/
    │   │   ├── 3d_to_2d_viewport.tscn
    │   │   ├── explosion.gd
    │   │   ├── explosion.gd.uid
    │   │   ├── explosion_3d.tscn
    │   │   └── particles_base_3d.tscn
    │   ├── particles/
    │   │   └── explosion.tscn
    │   └── tutorial/
    │       ├── tutorial_manager.gd
    │       ├── tutorial_manager.gd.uid
    │       └── tutorial_world.tscn
    └── scripts/
        ├── autoload.gd
        ├── autoload.gd.uid
        ├── autoload.tscn
        ├── callable_state_machine.gd
        ├── callable_state_machine.gd.uid
        ├── enemy_manager.gd
        ├── enemy_manager.gd.uid
        ├── particle_component_data.gd
        ├── particle_component_data.gd.uid
        ├── player_input_controller.gd
        ├── player_input_controller.gd.uid
        ├── reusable_states.gd
        ├── reusable_states.gd.uid
        ├── ui.gd
        ├── ui.gd.uid
        ├── velocity_component.gd
        ├── velocity_component.gd.uid
        ├── wave_manager.gd
        ├── wave_manager.gd.uid
        ├── world_data.gd
        └── world_data.gd.uid

================================================
File: resources/reusable_anims.tres
================================================
[gd_resource type="AnimationLibrary" load_steps=7 format=3 uid="uid://c5w2n8g7e1bdf"]

[sub_resource type="Animation" id="Animation_reset"]
resource_name = "RESET"
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("VisualComponent/Sprite2D:scale")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector2(1, 1)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("VisualComponent/Sprite2D:offset")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector2(0, 0)]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("VisualComponent/Sprite2D:modulate")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Color(1, 1, 1, 1)]
}
tracks/3/type = "value"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath("VisualComponent/Sprite2D:skew")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [0.0]
}
tracks/4/type = "value"
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/path = NodePath("VisualComponent/Sprite2D:scale")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector2(1, 1)]
}

[sub_resource type="Animation" id="Animation_death"]
resource_name = "death"
length = 0.5
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("VisualComponent/Sprite2D:scale")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.133333, 0.3, 0.5),
"transitions": PackedFloat32Array(1, 1, 1, 1),
"update": 0,
"values": [Vector2(1.2, 1.2), Vector2(1, 1), Vector2(1.5, 0.5), Vector2(0, 0)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("VisualComponent/Sprite2D:modulate:a")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0.2, 0.5),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [1.0, 0.0]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("VisualComponent/Sprite2D:material:shader_parameter/brightness")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0, 0.133333, 0.466667),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 0,
"values": [-0.05, 0.5, -0.05]
}

[sub_resource type="Animation" id="Animation_hurt"]
resource_name = "hurt_start"
length = 0.3
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("VisualComponent/Sprite2D:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.1, 0.3),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 0,
"values": [Color(1, 1, 1, 1), Color(1, 1, 1, 1), Color(1, 1, 1, 1)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("VisualComponent/Sprite2D:scale")
tracks/1/interp = 2
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.1, 0.3),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 0,
"values": [Vector2(1, 1), Vector2(1.4, 0.6), Vector2(1, 1)]
}
tracks/2/type = "method"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath(".")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"values": [{
"args": [15, 0.2],
"method": &"shake"
}]
}
tracks/3/type = "method"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath(".")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"values": [{
"args": [Color(1, 1, 1, 1), 0.1],
"method": &"flash_sprite"
}]
}
tracks/4/type = "value"
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/path = NodePath("VisualComponent/Sprite2D:material:shader_parameter/brightness")
tracks/4/interp = 2
tracks/4/loop_wrap = true
tracks/4/keys = {
"times": PackedFloat32Array(0, 0.0666667, 0.3),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 0,
"values": [-0.05, 0.5, -0.05]
}

[sub_resource type="Animation" id="Animation_idle"]
resource_name = "idle"
length = 2.0
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("VisualComponent/Sprite2D:scale")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 1),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [Vector2(1, 1), Vector2(1.05, 0.95)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("VisualComponent/Sprite2D:offset")
tracks/1/interp = 2
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 1),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [Vector2(0, 0), Vector2(0, 4)]
}

[sub_resource type="Animation" id="Animation_moving"]
resource_name = "moving"
length = 0.8
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("VisualComponent/Sprite2D:scale")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.5, 0.8),
"transitions": PackedFloat32Array(1, 1, 1, 1),
"update": 0,
"values": [Vector2(1, 1), Vector2(1.2, 0.8), Vector2(0.8, 1.2), Vector2(1, 1)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("VisualComponent/Sprite2D:offset:y")
tracks/1/interp = 2
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.2, 0.5, 0.8),
"transitions": PackedFloat32Array(1, 1, 1, 1),
"update": 0,
"values": [0.0, 5.0, -5.0, 0.0]
}

[sub_resource type="Animation" id="Animation_r2n38"]
resource_name = "void_transfer"
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("VisualComponent/Sprite2D:scale")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.7, 0.98),
"transitions": PackedFloat32Array(1, 1, 1, 1),
"update": 0,
"values": [Vector2(1, 1), Vector2(0.27, 0.27), Vector2(0.27, 0.27), Vector2(1, 1)]
}

[resource]
_data = {
&"RESET": SubResource("Animation_reset"),
&"death": SubResource("Animation_death"),
&"hurt_start": SubResource("Animation_hurt"),
&"idle": SubResource("Animation_idle"),
&"moving": SubResource("Animation_moving"),
&"void_transfer": SubResource("Animation_r2n38")
}



================================================
File: resources/void_particle.tres
================================================
[gd_resource type="GradientTexture2D" load_steps=2 format=3 uid="uid://cukxf57ep3k66"]

[sub_resource type="Gradient" id="Gradient_d6o6i"]
offsets = PackedFloat32Array(0, 0.44666666, 0.48)
colors = PackedColorArray(0.28118682, 0.28118688, 0.28118682, 1, 0.37413925, 0.37413928, 0.37413922, 1, 1, 1, 1, 0)

[resource]
gradient = SubResource("Gradient_d6o6i")
fill = 1
fill_from = Vector2(0.48598132, 0.55607474)
fill_to = Vector2(1, 0.03271028)



================================================
File: resources/void_particle_base.tres
================================================
[gd_resource type="ParticleProcessMaterial" format=3 uid="uid://c3mqsdu6dc6jt"]

[resource]
particle_flag_disable_z = true
angular_velocity_min = -300.0
angular_velocity_max = -300.0
gravity = Vector3(0, 0, 0)
scale_min = 0.5
scale_max = 0.5



================================================
File: resources/void_shooter_particles.tres
================================================
[gd_resource type="Resource" script_class="ParticleComponentData" load_steps=4 format=3 uid="uid://cd3seun45wtg5"]

[ext_resource type="Material" uid="uid://c3mqsdu6dc6jt" path="res://game/resources/void_particle_base.tres" id="1_610th"]
[ext_resource type="Script" uid="uid://xnufu1pes318" path="res://game/scripts/particle_component_data.gd" id="13iejsr"]
[ext_resource type="Texture2D" uid="uid://cukxf57ep3k66" path="res://game/resources/void_particle.tres" id="42i0wre"]

[resource]
script = ExtResource("13iejsr")
process_material = ExtResource("1_610th")
emission_amount = 1
emission_lifetime = 3.0
spread = 15.0
initial_velocity_max = 400.0
texture = ExtResource("42i0wre")
detection_area_size = Vector2(150, 500)



================================================
File: resources/void_trail_particles.tres
================================================
[gd_resource type="Resource" script_class="ParticleComponentData" load_steps=5 format=3 uid="uid://o0d13hr1tawv"]

[ext_resource type="Script" uid="uid://xnufu1pes318" path="res://game/scripts/particle_component_data.gd" id="1_ixmbr"]
[ext_resource type="Material" uid="uid://c3mqsdu6dc6jt" path="res://game/resources/void_particle_base.tres" id="1_von6d"]
[ext_resource type="Texture2D" uid="uid://cukxf57ep3k66" path="res://game/resources/void_particle.tres" id="2_von6d"]

[sub_resource type="Gradient" id="Gradient_1"]
offsets = PackedFloat32Array(0, 0.8, 1)
colors = PackedColorArray(0, 0, 0, 1, 0.8, 0.8, 0.8, 0.475, 1, 1, 1, 0)

[resource]
script = ExtResource("1_ixmbr")
process_material = ExtResource("1_von6d")
emission_lifetime = 2.4
direction = Vector2(0, 0)
initial_velocity_min = 0.0
initial_velocity_max = 5.0
angular_velocity_max = 60.0
texture = ExtResource("2_von6d")
color_ramp = SubResource("Gradient_1")
collision_enabled = false
detection_radius = 12.0
metadata/_custom_type_script = "uid://xnufu1pes318"



================================================
File: scenes/base_entity.gd
================================================
class_name BaseEntity extends CharacterBody2D

var size := 100

var fsm: CallableStateMachine = CallableStateMachine.new()
@onready var velocity_comp: VelocityComponent = $VelocityComponent
@onready var collision_shape_2d: CollisionShape2D = %CollisionShape2D
@onready var visual_component: CanvasGroup = %VisualComponent

var consume_tween : Tween

@onready var visible_on_screen_notifier_2d: VisibleOnScreenNotifier2D = %VisibleOnScreenNotifier2D

func _ready() -> void:
	visible_on_screen_notifier_2d.screen_entered.connect(add_to_group.bind("OnScreenEntities"))
	visible_on_screen_notifier_2d.screen_exited.connect(remove_from_group.bind("OnScreenEntities"))
	
	visual_component.material = visual_component.material.duplicate()

func _idle_normal() -> void:
	velocity_comp.stop()

func _idle_enter() -> void:
	pass

func _idle_leave() -> void:
	pass

func animate_free(anim_time:= 0.2):
	if consume_tween:
		consume_tween.kill()
		
	consume_tween = create_tween().set_trans(Tween.TRANS_CUBIC)
	consume_tween.tween_property(self, "scale", Vector2.ZERO, anim_time)
	consume_tween.parallel().tween_property(self, "rotation", 0, anim_time)
	consume_tween.tween_callback(queue_free)

func disable_collision(disable := true):
	collision_shape_2d.set_deferred("disabled", disable)



================================================
File: scenes/base_entity.gd.uid
================================================
uid://c6duo2aqy74j



================================================
File: scenes/base_entity.tscn
================================================
[gd_scene load_steps=9 format=3 uid="uid://c858pjqlq4uir"]

[ext_resource type="Script" uid="uid://c5yw0hf43uly8" path="res://game/scenes/base_void_entity.gd" id="1_123x1"]
[ext_resource type="Texture2D" uid="uid://bxhr5r1rfwigq" path="res://assets/assets/external/kenney/vector_complete.svg" id="1_d6o6i"]
[ext_resource type="Script" uid="uid://dqssv5ddlmmkv" path="res://game/scripts/velocity_component.gd" id="3_123x1"]
[ext_resource type="AnimationLibrary" uid="uid://c5w2n8g7e1bdf" path="res://game/resources/reusable_anims.tres" id="3_d6o6i"]
[ext_resource type="Shader" uid="uid://bf1q6g6cas62n" path="res://addons/my-ecosystem-template/shaders/flash_white.gdshader" id="3_x0wcv"]

[sub_resource type="ShaderMaterial" id="ShaderMaterial_123x1"]
shader = ExtResource("3_x0wcv")
shader_parameter/flash_color = Color(1, 1, 1, 1)
shader_parameter/flash_amount = 0.0

[sub_resource type="ShaderMaterial" id="ShaderMaterial_x0wcv"]

[sub_resource type="CircleShape2D" id="CircleShape2D_epc2k"]

[node name="Entity" type="CharacterBody2D"]
collision_layer = 3
collision_mask = 3
motion_mode = 1
script = ExtResource("1_123x1")

[node name="VisualComponent" type="CanvasGroup" parent="."]
unique_name_in_owner = true
material = SubResource("ShaderMaterial_123x1")

[node name="Sprite2D" type="Sprite2D" parent="VisualComponent"]
material = SubResource("ShaderMaterial_x0wcv")
position = Vector2(-3.8146973e-06, 7.6293945e-06)
texture = ExtResource("1_d6o6i")

[node name="VelocityComponent" type="Node" parent="."]
unique_name_in_owner = true
script = ExtResource("3_123x1")

[node name="AnimationComponent" type="Node" parent="."]
unique_name_in_owner = true

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
unique_name_in_owner = true
shape = SubResource("CircleShape2D_epc2k")

[node name="VisibleOnScreenNotifier2D" type="VisibleOnScreenNotifier2D" parent="."]
unique_name_in_owner = true

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
unique_name_in_owner = true
libraries = {
&"": ExtResource("3_d6o6i")
}



================================================
File: scenes/base_void_entity.gd
================================================
class_name BaseVoidEntity extends BaseEntity

@onready var animation_player: AnimationPlayer = %AnimationPlayer

var target_pos : Vector2
var mv_tween : Tween

@export var particle_configuration: ParticleComponentData


func _ready() -> void:
	super()
	fsm.add_states(_void_transfer_normal, _void_transfer_enter, _void_transfer_exit)
	

func _void_transfer_normal() -> void:
	pass #Override

func _void_transfer_enter() -> void:
	ScreenEffects.flash_white(visual_component, 1)
	animate_to_pos()
	disable_collision()

func _void_transfer_exit() -> void:
	if mv_tween.is_running():
		await mv_tween.finished
	disable_collision(false)

func _idle_normal() -> void:
	velocity_comp.stop()

func _idle_enter() -> void:
	pass

func _idle_leave() -> void:
	pass

func animate_free(anim_time:= 0.2):
	if consume_tween:
		consume_tween.kill()
		
	consume_tween = create_tween().set_trans(Tween.TRANS_CUBIC)
	consume_tween.tween_property(self, "scale", Vector2.ZERO, anim_time)
	consume_tween.parallel().tween_property(self, "rotation", 0, anim_time)
	consume_tween.tween_callback(queue_free)

func animate_to_pos() -> Tween:
	mv_tween = create_tween().set_trans(Tween.TRANS_CUBIC)
	mv_tween.tween_property(visual_component, "scale", Vector2.ONE * 0.27, 0.2)
	mv_tween.tween_property(self, "global_position", target_pos, 0.3)
	mv_tween.tween_property(visual_component, "scale", Vector2.ONE, 0.2)
	return mv_tween



================================================
File: scenes/base_void_entity.gd.uid
================================================
uid://c5yw0hf43uly8



================================================
File: scenes/particle_shooter_component.tscn
================================================
[gd_scene load_steps=2 format=3 uid="uid://bhynuxrkinm2p"]

[ext_resource type="PackedScene" uid="uid://t1b02bdkr6yd" path="res://game/scenes/particle_trail.tscn" id="1_f600r"]

[node name="ParticleShooter" instance=ExtResource("1_f600r")]
spread = 0.0
initial_velocity_min = 166.3
initial_velocity_max = 166.3



================================================
File: scenes/particle_trail.tscn
================================================
[gd_scene load_steps=4 format=3 uid="uid://t1b02bdkr6yd"]

[ext_resource type="Script" uid="uid://c8xa6iwwmu13q" path="res://game/scenes/void_particle_component.gd" id="1_08ykg"]
[ext_resource type="Texture2D" uid="uid://c57tkpiqysfw4" path="res://assets/assets/external/vortex-by-rpicster.png" id="1_cp5c7"]
[ext_resource type="Material" uid="uid://c3mqsdu6dc6jt" path="res://game/resources/void_particle_base.tres" id="2_6cm6y"]

[node name="ParticleTrail" type="GPUParticles2D"]
amount = 10
texture = ExtResource("1_cp5c7")
preprocess = 1.99
process_material = ExtResource("2_6cm6y")
script = ExtResource("1_08ykg")

[node name="ScanTimer" type="Timer" parent="."]
unique_name_in_owner = true
autostart = true



================================================
File: scenes/player.gd
================================================
class_name Player extends BaseVoidEntity  

static var I : Player #Global singelton (kinda)

func _init() -> void:
	I = self

#TODO: MAke

var owned_body : BaseEntity = null

var stamina : float = 100
@onready var player_input_controller: PlayerInputController = $PlayerInputController
@onready var velocity_component: VelocityComponent = $VelocityComponent

func _ready() -> void:
	player_input_controller.direction_changed.connect(velocity_component.accelerate_to)
	
	fsm.add_states(possess)

func consume():
	animate_free()

func _withdraw_entity_and_transition() -> void:
	var nearest := _find_on_screen_smaller_enemy()
	if nearest and size >= nearest.size:
		possess(nearest)
	else:
		print("Game over");
		get_tree().quit()

func possess(new_host: BaseEntity, on_death := false) -> void:
	global_position = new_host.global_position
	new_host.fsm.change_state(new_host.player_controlled)
	if on_death: 
		size -= new_host.size / 2
	else:
		size += new_host.size / size
	

func _find_on_screen_smaller_enemy() -> BaseEntity:
	var enemies = get_tree().get_nodes_in_group("OnScreenEntities")
	var closest: BaseEntity = null
	var min_dist: float = INF
	for enemy in enemies:
		var dist = global_position.distance_to(enemy.global_position)
		if dist < min_dist:
			min_dist = dist
			closest = enemy
	return closest



================================================
File: scenes/player.gd.uid
================================================
uid://d0p8h5hn06vnm



================================================
File: scenes/player.tscn
================================================
[gd_scene load_steps=4 format=3 uid="uid://cqn0wql0x332g"]

[ext_resource type="PackedScene" uid="uid://c858pjqlq4uir" path="res://game/scenes/base_entity.tscn" id="1_0gakw"]
[ext_resource type="Script" uid="uid://ktmfubc7ljmr" path="res://game/scripts/player_input_controller.gd" id="2_p0vpi"]
[ext_resource type="Script" uid="uid://d0p8h5hn06vnm" path="res://game/scenes/player.gd" id="2_u5gyh"]

[node name="Player" instance=ExtResource("1_0gakw")]
collision_layer = 3
collision_mask = 2
script = ExtResource("2_u5gyh")

[node name="PlayerInputController" type="Node2D" parent="." index="3"]
script = ExtResource("2_p0vpi")
metadata/_custom_type_script = "uid://ktmfubc7ljmr"



================================================
File: scenes/test-arena-tileset.tres
================================================
[gd_resource type="TileSet" load_steps=5 format=3 uid="uid://ci4yy6s854qm2"]

[ext_resource type="Texture2D" uid="uid://bxhr5r1rfwigq" path="res://assets/assets/external/kenney/vector_complete.svg" id="1_o1o7s"]
[ext_resource type="Texture2D" uid="uid://dq5ok2scpsoqt" path="res://assets/assets/tileset.svg" id="2_872w1"]

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_epc2k"]
resource_name = "terrain"
texture = ExtResource("1_o1o7s")
texture_region_size = Vector2i(64, 64)
0:0/0 = 0
1:0/0 = 0
2:0/0 = 0
3:0/0 = 0
4:0/0 = 0
5:0/0 = 0
6:0/0 = 0
7:0/0 = 0
8:0/0 = 0
9:0/0 = 0
10:0/0 = 0
11:0/0 = 0
12:0/0 = 0
13:0/0 = 0
14:0/0 = 0
15:0/0 = 0
16:0/0 = 0
17:0/0 = 0
18:0/0 = 0
19:0/0 = 0
20:0/0 = 0
21:0/0 = 0
22:0/0 = 0
23:0/0 = 0
24:0/0 = 0
25:0/0 = 0
26:0/0 = 0
27:0/0 = 0
28:0/0 = 0
29:0/0 = 0
30:0/0 = 0
31:0/0 = 0
32:0/0 = 0
33:0/0 = 0
34:0/0 = 0
35:0/0 = 0
36:0/0 = 0
0:1/0 = 0
1:1/0 = 0
2:1/0 = 0
3:1/0 = 0
4:1/0 = 0
5:1/0 = 0
6:1/0 = 0
7:1/0 = 0
8:1/0 = 0
9:1/0 = 0
10:1/0 = 0
11:1/0 = 0
12:1/0 = 0
13:1/0 = 0
14:1/0 = 0
17:1/0 = 0
18:1/0 = 0
19:1/0 = 0
20:1/0 = 0
21:1/0 = 0
22:1/0 = 0
23:1/0 = 0
24:1/0 = 0
25:1/0 = 0
26:1/0 = 0
27:1/0 = 0
28:1/0 = 0
29:1/0 = 0
30:1/0 = 0
31:1/0 = 0
32:1/0 = 0
33:1/0 = 0
34:1/0 = 0
35:1/0 = 0
36:1/0 = 0
0:2/0 = 0
1:2/0 = 0
2:2/0 = 0
3:2/0 = 0
4:2/0 = 0
5:2/0 = 0
6:2/0 = 0
7:2/0 = 0
8:2/0 = 0
9:2/0 = 0
10:2/0 = 0
11:2/0 = 0
12:2/0 = 0
13:2/0 = 0
14:2/0 = 0
17:2/0 = 0
18:2/0 = 0
19:2/0 = 0
20:2/0 = 0
21:2/0 = 0
22:2/0 = 0
23:2/0 = 0
24:2/0 = 0
25:2/0 = 0
26:2/0 = 0
27:2/0 = 0
28:2/0 = 0
29:2/0 = 0
30:2/0 = 0
31:2/0 = 0
32:2/0 = 0
33:2/0 = 0
34:2/0 = 0
35:2/0 = 0
36:2/0 = 0
0:3/0 = 0
1:3/0 = 0
2:3/0 = 0
3:3/0 = 0
4:3/0 = 0
5:3/0 = 0
6:3/0 = 0
7:3/0 = 0
8:3/0 = 0
9:3/0 = 0
10:3/0 = 0
11:3/0 = 0
12:3/0 = 0
13:3/0 = 0
14:3/0 = 0
15:3/0 = 0
16:3/0 = 0
17:3/0 = 0
18:3/0 = 0
19:3/0 = 0
20:3/0 = 0
21:3/0 = 0
22:3/0 = 0
23:3/0 = 0
24:3/0 = 0
25:3/0 = 0
26:3/0 = 0
27:3/0 = 0
28:3/0 = 0
29:3/0 = 0
30:3/0 = 0
31:3/0 = 0
32:3/0 = 0
33:3/0 = 0
34:3/0 = 0
35:3/0 = 0
36:3/0 = 0
0:4/0 = 0
1:4/0 = 0
2:4/0 = 0
3:4/0 = 0
4:4/0 = 0
5:4/0 = 0
6:4/0 = 0
7:4/0 = 0
8:4/0 = 0
9:4/0 = 0
10:4/0 = 0
11:4/0 = 0
12:4/0 = 0
13:4/0 = 0
14:4/0 = 0
15:4/0 = 0
16:4/0 = 0
17:4/0 = 0
18:4/0 = 0
19:4/0 = 0
20:4/0 = 0
21:4/0 = 0
22:4/0 = 0
23:4/0 = 0
24:4/0 = 0
25:4/0 = 0
26:4/0 = 0
27:4/0 = 0
28:4/0 = 0
29:4/0 = 0
30:4/0 = 0
31:4/0 = 0
32:4/0 = 0
33:4/0 = 0
34:4/0 = 0
35:4/0 = 0
36:4/0 = 0
0:5/0 = 0
1:5/0 = 0
2:5/0 = 0
3:5/0 = 0
4:5/0 = 0
5:5/0 = 0
6:5/0 = 0
7:5/0 = 0
8:5/0 = 0
9:5/0 = 0
10:5/0 = 0
11:5/0 = 0
12:5/0 = 0
13:5/0 = 0
14:5/0 = 0
15:5/0 = 0
16:5/0 = 0
17:5/0 = 0
18:5/0 = 0
19:5/0 = 0
20:5/0 = 0
21:5/0 = 0
22:5/0 = 0
23:5/0 = 0
24:5/0 = 0
25:5/0 = 0
26:5/0 = 0
27:5/0 = 0
28:5/0 = 0
29:5/0 = 0
30:5/0 = 0
31:5/0 = 0
32:5/0 = 0
33:5/0 = 0
34:5/0 = 0
35:5/0 = 0
36:5/0 = 0
0:6/0 = 0
1:6/0 = 0
2:6/0 = 0
3:6/0 = 0
4:6/0 = 0
5:6/0 = 0
6:6/0 = 0
7:6/0 = 0
8:6/0 = 0
9:6/0 = 0
10:6/0 = 0
11:6/0 = 0
12:6/0 = 0
13:6/0 = 0
14:6/0 = 0
15:6/0 = 0
16:6/0 = 0
17:6/0 = 0
18:6/0 = 0
19:6/0 = 0
20:6/0 = 0
21:6/0 = 0
22:6/0 = 0
23:6/0 = 0
24:6/0 = 0
25:6/0 = 0
26:6/0 = 0
27:6/0 = 0
28:6/0 = 0
29:6/0 = 0
30:6/0 = 0
31:6/0 = 0
32:6/0 = 0
33:6/0 = 0
34:6/0 = 0
35:6/0 = 0
36:6/0 = 0
0:7/0 = 0
2:7/0 = 0
3:7/0 = 0
4:7/0 = 0
5:7/0 = 0
6:7/0 = 0
7:7/0 = 0
8:7/0 = 0
9:7/0 = 0
10:7/0 = 0
11:7/0 = 0
12:7/0 = 0
13:7/0 = 0
14:7/0 = 0
15:7/0 = 0
16:7/0 = 0
17:7/0 = 0
18:7/0 = 0
19:7/0 = 0
20:7/0 = 0
21:7/0 = 0
22:7/0 = 0
23:7/0 = 0
24:7/0 = 0
25:7/0 = 0
26:7/0 = 0
27:7/0 = 0
28:7/0 = 0
29:7/0 = 0
30:7/0 = 0
31:7/0 = 0
32:7/0 = 0
0:8/0 = 0
1:8/0 = 0
2:8/0 = 0
3:8/0 = 0
4:8/0 = 0
5:8/0 = 0
6:8/0 = 0
7:8/0 = 0
8:8/0 = 0
9:8/0 = 0
10:8/0 = 0
11:8/0 = 0
12:8/0 = 0
13:8/0 = 0
14:8/0 = 0
15:8/0 = 0
16:8/0 = 0
17:8/0 = 0
18:8/0 = 0
19:8/0 = 0
20:8/0 = 0
21:8/0 = 0
22:8/0 = 0
23:8/0 = 0
24:8/0 = 0
25:8/0 = 0
26:8/0 = 0
27:8/0 = 0
28:8/0 = 0
29:8/0 = 0
30:8/0 = 0
31:8/0 = 0
32:8/0 = 0
0:9/0 = 0
1:9/0 = 0
2:9/0 = 0
3:9/0 = 0
4:9/0 = 0
5:9/0 = 0
6:9/0 = 0
7:9/0 = 0
8:9/0 = 0
9:9/0 = 0
10:9/0 = 0
11:9/0 = 0
12:9/0 = 0
13:9/0 = 0
14:9/0 = 0
15:9/0 = 0
16:9/0 = 0
17:9/0 = 0
18:9/0 = 0
19:9/0 = 0
20:9/0 = 0
21:9/0 = 0
22:9/0 = 0
23:9/0 = 0
24:9/0 = 0
25:9/0 = 0
26:9/0 = 0
27:9/0 = 0
28:9/0 = 0
29:9/0 = 0
30:9/0 = 0
31:9/0 = 0
32:9/0 = 0
0:10/0 = 0
1:10/0 = 0
2:10/0 = 0
3:10/0 = 0
4:10/0 = 0
5:10/0 = 0
6:10/0 = 0
7:10/0 = 0
8:10/0 = 0
9:10/0 = 0
10:10/0 = 0
11:10/0 = 0
12:10/0 = 0
13:10/0 = 0
14:10/0 = 0
15:10/0 = 0
16:10/0 = 0
17:10/0 = 0
18:10/0 = 0
19:10/0 = 0
20:10/0 = 0
21:10/0 = 0
22:10/0 = 0
23:10/0 = 0
24:10/0 = 0
25:10/0 = 0
26:10/0 = 0
27:10/0 = 0
28:10/0 = 0
29:10/0 = 0
30:10/0 = 0
31:10/0 = 0
32:10/0 = 0
0:11/0 = 0
1:11/0 = 0
2:11/0 = 0
3:11/0 = 0
4:11/0 = 0
5:11/0 = 0
6:11/0 = 0
7:11/0 = 0
8:11/0 = 0
9:11/0 = 0
10:11/0 = 0
11:11/0 = 0
12:11/0 = 0
13:11/0 = 0
14:11/0 = 0
15:11/0 = 0
16:11/0 = 0
17:11/0 = 0
18:11/0 = 0
19:11/0 = 0
20:11/0 = 0
21:11/0 = 0
22:11/0 = 0
23:11/0 = 0
24:11/0 = 0
25:11/0 = 0
26:11/0 = 0
27:11/0 = 0
28:11/0 = 0
29:11/0 = 0
30:11/0 = 0
31:11/0 = 0
32:11/0 = 0
0:12/0 = 0
1:12/0 = 0
2:12/0 = 0
3:12/0 = 0
4:12/0 = 0
5:12/0 = 0
6:12/0 = 0
7:12/0 = 0
8:12/0 = 0
9:12/0 = 0
10:12/0 = 0
11:12/0 = 0
12:12/0 = 0
13:12/0 = 0
14:12/0 = 0
15:12/0 = 0
16:12/0 = 0
17:12/0 = 0
18:12/0 = 0
19:12/0 = 0
20:12/0 = 0
21:12/0 = 0
22:12/0 = 0
23:12/0 = 0
24:12/0 = 0
25:12/0 = 0
26:12/0 = 0
27:12/0 = 0
28:12/0 = 0
29:12/0 = 0
30:12/0 = 0
31:12/0 = 0
32:12/0 = 0
0:13/0 = 0
1:13/0 = 0
2:13/0 = 0
3:13/0 = 0
4:13/0 = 0
5:13/0 = 0
6:13/0 = 0
7:13/0 = 0
8:13/0 = 0
9:13/0 = 0
10:13/0 = 0
11:13/0 = 0
12:13/0 = 0
13:13/0 = 0
14:13/0 = 0
15:13/0 = 0
16:13/0 = 0
17:13/0 = 0
18:13/0 = 0
19:13/0 = 0
20:13/0 = 0
21:13/0 = 0
22:13/0 = 0
23:13/0 = 0
24:13/0 = 0
25:13/0 = 0
26:13/0 = 0
27:13/0 = 0
28:13/0 = 0
29:13/0 = 0
30:13/0 = 0
31:13/0 = 0
32:13/0 = 0
1:7/0 = 0

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_auctp"]
resource_name = "arena"
texture = ExtResource("2_872w1")
texture_region_size = Vector2i(64, 64)
0:0/next_alternative_id = 3
0:0/0 = 0
0:0/0/terrain_set = 0
0:0/0/terrain = 0
0:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-32, 32, -32, -32, 32, -32, 32, 15.805267, 0, 15.805267, -7.9026375, 32)
0:0/0/terrains_peering_bit/right_side = 0
0:0/0/terrains_peering_bit/bottom_right_corner = 0
0:0/0/terrains_peering_bit/bottom_side = 0
1:0/next_alternative_id = 2
1:0/0 = 0
1:0/0/terrain_set = 0
1:0/0/terrain = 0
1:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-32, 20.32106, -32, -32, 6.7736893, -32, 32, -32, 32, 18.62764, -2.2578964, 19.756584)
1:0/0/terrains_peering_bit/right_side = 0
1:0/0/terrains_peering_bit/bottom_right_corner = 0
1:0/0/terrains_peering_bit/bottom_side = 0
1:0/0/terrains_peering_bit/bottom_left_corner = 0
1:0/0/terrains_peering_bit/left_side = 0
2:0/next_alternative_id = 2
2:0/0 = 0
2:0/0/terrain_set = 0
2:0/0/terrain = 0
2:0/0/physics_layer_0/polygon_0/points = PackedVector2Array(-32, 18.063164, -32, -32, 6.7736893, -32, 32, -32, 32, 18.62764, 32, 32, 4.515789, 32, 3.9513168, 18.063164)
2:0/0/terrains_peering_bit/bottom_side = 0
2:0/0/terrains_peering_bit/bottom_left_corner = 0
2:0/0/terrains_peering_bit/left_side = 0
0:1/next_alternative_id = 2
0:1/0 = 0
0:1/0/terrain_set = 0
0:1/0/terrain = 0
0:1/0/physics_layer_0/polygon_0/points = PackedVector2Array(-32, 32, -32, -32, -7.9026337, -32, -8.46711, 32)
0:1/0/terrains_peering_bit/right_side = 0
0:1/0/terrains_peering_bit/bottom_right_corner = 0
0:1/0/terrains_peering_bit/bottom_side = 0
0:1/0/terrains_peering_bit/top_side = 0
0:1/0/terrains_peering_bit/top_right_corner = 0
1:1/next_alternative_id = 2
1:1/0 = 0
1:1/0/terrain_set = 0
1:1/0/terrain = 0
1:1/0/terrains_peering_bit/right_side = 0
1:1/0/terrains_peering_bit/bottom_right_corner = 0
1:1/0/terrains_peering_bit/bottom_side = 0
1:1/0/terrains_peering_bit/bottom_left_corner = 0
1:1/0/terrains_peering_bit/left_side = 0
1:1/0/terrains_peering_bit/top_left_corner = 0
1:1/0/terrains_peering_bit/top_side = 0
1:1/0/terrains_peering_bit/top_right_corner = 0
2:1/next_alternative_id = 2
2:1/0 = 0
2:1/0/terrain_set = 0
2:1/0/terrain = 0
2:1/0/physics_layer_0/polygon_0/points = PackedVector2Array(6.2092133, 32, 6.7736893, -32, 32, -32, 32, 32)
2:1/0/terrains_peering_bit/bottom_side = 0
2:1/0/terrains_peering_bit/bottom_left_corner = 0
2:1/0/terrains_peering_bit/left_side = 0
2:1/0/terrains_peering_bit/top_left_corner = 0
2:1/0/terrains_peering_bit/top_side = 0
0:2/next_alternative_id = 2
0:2/0 = 0
0:2/0/terrain_set = 0
0:2/0/terrain = 0
0:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-32, 32, -32, -32, -8.46711, -32, -3.9513168, 2.2578964, 32, 9.031578, 32, 32)
0:2/0/terrains_peering_bit/right_side = 0
0:2/0/terrains_peering_bit/top_side = 0
0:2/0/terrains_peering_bit/top_right_corner = 0
1:2/next_alternative_id = 2
1:2/0 = 0
1:2/0/terrain_set = 0
1:2/0/terrain = 0
1:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-32, 32, -32, 0, 32, 0.5644722, 32, 32)
1:2/0/terrains_peering_bit/right_side = 0
1:2/0/terrains_peering_bit/left_side = 0
1:2/0/terrains_peering_bit/top_left_corner = 0
1:2/0/terrains_peering_bit/top_side = 0
1:2/0/terrains_peering_bit/top_right_corner = 0
2:2/next_alternative_id = 2
2:2/0 = 0
2:2/0/terrain_set = 0
2:2/0/terrain = 0
2:2/0/physics_layer_0/polygon_0/points = PackedVector2Array(-32, 32, -32, 8.46711, 1.6934204, 3.3868408, 12.418423, -32, 32, -32, 32, 32)
2:2/0/terrains_peering_bit/left_side = 0
2:2/0/terrains_peering_bit/top_left_corner = 0
2:2/0/terrains_peering_bit/top_side = 0

[resource]
tile_size = Vector2i(64, 64)
physics_layer_0/collision_layer = 1
terrain_set_0/mode = 0
terrain_set_0/terrain_0/name = "Terrain 0"
terrain_set_0/terrain_0/color = Color(0.5, 0.34375, 0.25, 1)
sources/0 = SubResource("TileSetAtlasSource_epc2k")
sources/1 = SubResource("TileSetAtlasSource_auctp")



================================================
File: scenes/test-world.tscn
================================================
[gd_scene load_steps=3 format=4 uid="uid://d1dgb8mfo8xtw"]

[ext_resource type="PackedScene" uid="uid://cqn0wql0x332g" path="res://game/scenes/player.tscn" id="3_fstcu"]
[ext_resource type="Script" uid="uid://bxfwyvw3ntd0m" path="res://game/scripts/enemy_manager.gd" id="4_f6rtr"]

[node name="World" type="Node2D"]

[node name="TileMapLayer" type="TileMapLayer" parent="."]
tile_map_data = PackedByteArray("AAARAAkAAQACAAIAAAARAAgAAQACAAEAAAARAAcAAQACAAEAAAARAAYAAQACAAEAAAARAAUAAQACAAEAAAARAAQAAQACAAEAAAARAAMAAQACAAEAAAARAAIAAQACAAEAAAARAAEAAQACAAEAAAARAAAAAQACAAAAAAAQAAkAAQABAAIAAAAQAAAAAQABAAAAAAAPAAkAAQABAAIAAAAPAAAAAQABAAAAAAAOAAkAAQABAAIAAAAOAAAAAQABAAAAAAANAAkAAQABAAIAAAANAAAAAQABAAAAAAAMAAkAAQABAAIAAAAMAAAAAQABAAAAAAALAAkAAQABAAIAAAALAAAAAQABAAAAAAAKAAkAAQABAAIAAAAKAAAAAQABAAAAAAAJAAkAAQABAAIAAAAJAAAAAQABAAAAAAAIAAkAAQABAAIAAAAIAAAAAQABAAAAAAAHAAkAAQABAAIAAAAHAAAAAQABAAAAAAAGAAkAAQABAAIAAAAGAAAAAQABAAAAAAAFAAkAAQABAAIAAAAFAAAAAQABAAAAAAAEAAkAAQABAAIAAAAEAAAAAQABAAAAAAADAAkAAQABAAIAAAADAAAAAQABAAAAAAACAAkAAQABAAIAAAACAAAAAQABAAAAAAABAAkAAQABAAIAAAABAAAAAQABAAAAAAAAAAkAAQAAAAIAAAAAAAgAAQAAAAEAAAAAAAcAAQAAAAEAAAAAAAYAAQAAAAEAAAAAAAUAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAEAAQAAAAEAAAAAAAAAAQAAAAAAAAAMAAYAAQABAAEAAAAMAAUAAQABAAEAAAAMAAQAAQABAAEAAAAMAAMAAQABAAEAAAAMAAIAAQABAAEAAAAMAAEAAQABAAEAAAALAAEAAQABAAEAAAAKAAEAAQABAAEAAAAJAAEAAQABAAEAAAAIAAEAAQABAAEAAAAHAAEAAQABAAEAAAAGAAEAAQABAAEAAAAFAAEAAQABAAEAAAAEAAEAAQABAAEAAAADAAEAAQABAAEAAAACAAEAAQABAAEAAAABAAEAAQABAAEAAAABAAIAAQABAAEAAAABAAMAAQABAAEAAAABAAQAAQABAAEAAAABAAUAAQABAAEAAAABAAYAAQABAAEAAAABAAcAAQABAAEAAAABAAgAAQABAAEAAAACAAgAAQABAAEAAAACAAcAAQABAAEAAAACAAYAAQABAAEAAAACAAUAAQABAAEAAAACAAQAAQABAAEAAAACAAMAAQABAAEAAAACAAIAAQABAAEAAAADAAIAAQABAAEAAAADAAMAAQABAAEAAAADAAQAAQABAAEAAAADAAUAAQABAAEAAAADAAYAAQABAAEAAAADAAcAAQABAAEAAAADAAgAAQABAAEAAAAEAAgAAQABAAEAAAAEAAcAAQABAAEAAAAEAAYAAQABAAEAAAAEAAUAAQABAAEAAAAEAAQAAQABAAEAAAAEAAMAAQABAAEAAAAEAAIAAQABAAEAAAAFAAIAAQABAAEAAAAFAAMAAQABAAEAAAAFAAQAAQABAAEAAAAFAAUAAQABAAEAAAAFAAYAAQABAAEAAAAFAAcAAQABAAEAAAAFAAgAAQABAAEAAAAGAAgAAQABAAEAAAAGAAcAAQABAAEAAAAGAAYAAQABAAEAAAAGAAUAAQABAAEAAAAGAAQAAQABAAEAAAAGAAMAAQABAAEAAAAGAAIAAQABAAEAAAAHAAIAAQABAAEAAAAHAAMAAQABAAEAAAAHAAQAAQABAAEAAAAHAAUAAQABAAEAAAAHAAYAAQABAAEAAAAHAAcAAQABAAEAAAAHAAgAAQABAAEAAAAIAAgAAQABAAEAAAAIAAcAAQABAAEAAAAIAAYAAQABAAEAAAAIAAUAAQABAAEAAAAIAAQAAQABAAEAAAAIAAMAAQABAAEAAAAIAAIAAQABAAEAAAAJAAIAAQABAAEAAAAJAAMAAQABAAEAAAAJAAQAAQABAAEAAAAJAAUAAQABAAEAAAAJAAYAAQABAAEAAAAJAAcAAQABAAEAAAAJAAgAAQABAAEAAAAKAAgAAQABAAEAAAAKAAcAAQABAAEAAAAKAAYAAQABAAEAAAAKAAUAAQABAAEAAAAKAAQAAQABAAEAAAAKAAMAAQABAAEAAAAKAAIAAQABAAEAAAALAAIAAQABAAEAAAALAAMAAQABAAEAAAALAAQAAQABAAEAAAALAAUAAQABAAEAAAALAAYAAQABAAEAAAALAAcAAQABAAEAAAALAAgAAQABAAEAAAAMAAgAAQABAAEAAAAMAAcAAQABAAEAAAANAAcAAQABAAEAAAANAAYAAQABAAEAAAANAAUAAQABAAEAAAANAAQAAQABAAEAAAANAAMAAQABAAEAAAANAAIAAQABAAEAAAANAAEAAQABAAEAAAAOAAEAAQABAAEAAAAOAAIAAQABAAEAAAAOAAMAAQABAAEAAAAOAAQAAQABAAEAAAAOAAUAAQABAAEAAAAOAAYAAQABAAEAAAAOAAcAAQABAAEAAAAOAAgAAQABAAEAAAANAAgAAQABAAEAAAAPAAgAAQABAAEAAAAPAAcAAQABAAEAAAAPAAYAAQABAAEAAAAPAAUAAQABAAEAAAAPAAQAAQABAAEAAAAPAAMAAQABAAEAAAAPAAIAAQABAAEAAAAPAAEAAQABAAEAAAAQAAEAAQABAAEAAAAQAAIAAQABAAEAAAAQAAMAAQABAAEAAAAQAAQAAQABAAEAAAAQAAUAAQABAAEAAAAQAAYAAQABAAEAAAAQAAcAAQABAAEAAAAQAAgAAQABAAEAAAA=")

[node name="Player" parent="." instance=ExtResource("3_fstcu")]
position = Vector2(189, 166)

[node name="EnemyManager" type="Node" parent="."]
script = ExtResource("4_f6rtr")
metadata/_custom_type_script = "uid://bxfwyvw3ntd0m"



================================================
File: scenes/void_hunter.gd
================================================
class_name VoidHunter extends VoidKeeper

@export var chase_range := 200

func _ready() -> void:
	fsm.add_states(_chase_normal, _chase_enter, _chase_leave)
	fsm.set_initial_state(_chase_normal)


func _chase_normal() -> void:
	var player_pos = WorldDataA.get_player_pos()
	if global_position.distance_to(player_pos) > chase_range:
		fsm.change_state(_wander_normal)
	velocity_comp.accelerate_to((player_pos - global_position).normalized(), speed)

func _chase_enter() -> void:
	print("Hunter chasing player!")

func _chase_leave() -> void:
	pass



================================================
File: scenes/void_hunter.gd.uid
================================================
uid://iupp2y4ysn3s



================================================
File: scenes/void_keeper.gd
================================================
class_name VoidKeeper extends BaseVoidEntity

#@export var dash_speed: float = 200.0
#@export var dash_cooldown: float = 5.0
@export var speed: float = 100.0
@export var wander_radius: float = 200.0
@export var idle_time: float = 2.0

@onready var particle_component: VoidParticleComponent = $ParticleTrail

func _ready() -> void:
	super()
	fsm.add_states(_idle_normal, _idle_enter, _idle_leave)
	fsm.add_states(_wander_normal, _wander_enter, _wander_leave)
	
	fsm.set_initial_state(_wander_normal)
		
	particle_component.void_consume.connect(func(gp): target_pos = gp; fsm.change_state(_void_transfer_normal))

func _physics_process(_delta: float) -> void: 
	fsm.update()

func _void_transfer_normal() -> void:
	if not mv_tween.is_running():
		fsm.change_state(_wander_normal)

func _wander_normal() -> void:
	if global_position.distance_to(target_pos) < 10.0:
		fsm.change_state(_idle_normal)
	velocity_comp.accelerate_to((target_pos - global_position).normalized(), speed)

func _wander_enter() -> void:
	target_pos = global_position + Vector2(randf_range(-wander_radius, wander_radius), randf_range(-wander_radius, wander_radius))

func _wander_leave() -> void:
	pass

func _idle_enter() -> void:
	await get_tree().create_timer(randf_range(1.0, idle_time)).timeout
	fsm.change_state(_wander_normal)



#Cut for scope creep, can add later
#func _on_dash_timer_timeout() or _dash_normal -> void:
	#speed = dash_speed
	#await get_tree().create_timer(0.3).timeout
	#speed = base_speed or speed / 2



================================================
File: scenes/void_keeper.gd.uid
================================================
uid://bk84sgibi4rb0



================================================
File: scenes/void_keeper.tscn
================================================
[gd_scene load_steps=5 format=3 uid="uid://dabg8sulcosd5"]

[ext_resource type="PackedScene" uid="uid://c858pjqlq4uir" path="res://game/scenes/base_entity.tscn" id="1_0haob"]
[ext_resource type="Script" uid="uid://bk84sgibi4rb0" path="res://game/scenes/void_keeper.gd" id="2_5lt4g"]
[ext_resource type="PackedScene" uid="uid://t1b02bdkr6yd" path="res://game/scenes/particle_trail.tscn" id="2_18c18"]
[ext_resource type="Resource" uid="uid://o0d13hr1tawv" path="res://game/resources/void_trail_particles.tres" id="3_t8ci3"]

[node name="VoidKeeper" instance=ExtResource("1_0haob")]
script = ExtResource("2_5lt4g")
speed = 100.0
wander_radius = 200.0
idle_time = 2.0
particle_configuration = ExtResource("3_t8ci3")

[node name="ParticleTrail" parent="." index="3" instance=ExtResource("2_18c18")]
particle_data = ExtResource("3_t8ci3")

[node name="DashTimer" type="Timer" parent="." index="5"]
wait_time = 5.0
autostart = true



================================================
File: scenes/void_liner.gd
================================================
class_name VoidLiner extends BaseVoidEntity

@export var throw_force: float = 500.0

#func _input(event: InputEvent) -> void:
	#if event.is_action_pressed("perform_trigger_action"):
		#_throw_void()

#@export var dash_speed: float = 200.0
#@export var dash_cooldown: float = 5.0
@export var speed: float = 100.0
@export var wander_radius: float = 200.0
@export var idle_time: float = 2.0

@onready var particle_component: VoidParticleComponent = $ParticleShooter

func _ready() -> void:
	super()
	fsm.add_states(_idle_normal, _idle_enter, _idle_leave)
	fsm.add_states(_wander_normal, _wander_enter, _wander_leave)
	
	fsm.set_initial_state(_wander_normal)
	
	particle_component.set_particle_data(particle_configuration)
	
	#FIXME: Just doesn't work for some reason
	particle_component.void_consume.connect(func(gp): target_pos = gp; fsm.change_state(_void_transfer_normal))

func _physics_process(_delta: float) -> void: 
	fsm.update()

func _void_transfer_enter() -> void:
	super()
	
	fsm.change_state(_wander_normal)

func _wander_normal() -> void:
	if global_position.distance_to(target_pos) < randf_range(1, 10.0):
		fsm.change_state(_idle_normal)
	velocity_comp.accelerate_to((target_pos - global_position).normalized(), speed)

func _wander_enter() -> void:
	target_pos = global_position + Vector2(randf_range(-wander_radius, wander_radius), randf_range(-wander_radius, wander_radius))

func _wander_leave() -> void:
	pass

func _idle_enter() -> void:
	await get_tree().create_timer(randf_range(1.0, idle_time)).timeout
	fsm.change_state(_wander_normal)



#Cut for scope creep, can add later
#func _on_dash_timer_timeout() or _dash_normal -> void:
	#speed = dash_speed
	#await get_tree().create_timer(0.3).timeout
	#speed = base_speed or speed / 2



================================================
File: scenes/void_liner.gd.uid
================================================
uid://dfk0uix57lssn



================================================
File: scenes/void_liner.tscn
================================================
[gd_scene load_steps=6 format=3 uid="uid://qu1w67qq821n"]

[ext_resource type="PackedScene" uid="uid://c858pjqlq4uir" path="res://game/scenes/base_entity.tscn" id="1_hrenx"]
[ext_resource type="Script" uid="uid://dfk0uix57lssn" path="res://game/scenes/void_liner.gd" id="2_7aven"]
[ext_resource type="Resource" uid="uid://cd3seun45wtg5" path="res://game/resources/void_shooter_particles.tres" id="3_h266x"]
[ext_resource type="PackedScene" uid="uid://bhynuxrkinm2p" path="res://game/scenes/particle_shooter_component.tscn" id="3_hxeb3"]
[ext_resource type="Texture2D" uid="uid://cukxf57ep3k66" path="res://game/resources/void_particle.tres" id="4_vmytg"]

[node name="VoidLiner" instance=ExtResource("1_hrenx")]
script = ExtResource("2_7aven")
throw_force = 500.0
speed = 100.0
wander_radius = 200.0
idle_time = 2.0
particle_configuration = ExtResource("3_h266x")

[node name="ParticleShooter" parent="." index="6" instance=ExtResource("3_hxeb3")]
texture = ExtResource("4_vmytg")
particle_data = ExtResource("3_h266x")



================================================
File: scenes/void_master.gd
================================================
class_name VoidMaster extends BaseVoidEntity

@export var phase_health_thresholds = [0.75, 0.5, 0.25]
@export var transform_cooldown: float = 5.0

var consumed_forms: Array[String] = []
var current_form: String = "void_master"
var current_phase: int = 0
var can_transform: bool = true

signal boss_defeated()

func _ready() -> void:
	super()
	size = 300
	fsm.add_states(_boss_idle_normal)
	fsm.add_states(_transform_normal, _transform_enter)
	fsm.add_states(_attack_pattern_normal)
	
	fsm.set_initial_state(_boss_idle_normal)

func _boss_idle_normal() -> void:
	# Choose action based on phase
	if can_transform and consumed_forms.size() > 0:
		if randf() < 0.3:  # 30% chance to transform
			fsm.change_state(_transform_normal)
			return
	
	# Otherwise attack
	fsm.change_state(_attack_pattern_normal)

func _attack_pattern_normal():
	fsm.change_state(_boss_idle_normal)

func _transform_normal() -> void:
	pass

func _transform_enter() -> void:
	can_transform = false
	
	# Choose random consumed form
	var new_form = consumed_forms[randi() % consumed_forms.size()]
	
	# Visual transformation effect
	ScreenEffects.void_transform(visual_component)
	
	# Copy abilities from that enemy type
	await get_tree().create_timer(1.0).timeout
	_copy_enemy_abilities(new_form)
	
	# Cooldown
	await get_tree().create_timer(transform_cooldown).timeout
	can_transform = true
	
	fsm.change_state(_boss_idle_normal)

func _copy_enemy_abilities(enemy_type: String) -> void:
	current_form = enemy_type
	
	match enemy_type:
		"void_hunter":
			speed *= 1.5
		"void_liner":
			# Enable projectile shooting
			_enable_projectiles()
		"void_police":
			# Enable stunning ability
			_enable_stun_wave()

func consume_enemy(enemy: BaseEntity) -> void:
	var enemy_type = enemy.get_class()
	if not enemy_type in consumed_forms:
		consumed_forms.append(enemy_type)
	
	# Grow stronger
	size += enemy.size * 0.1

func take_damage(amount: float) -> void:
	health -= amount
	
	# Check phase transitions
	var health_percent = health / max_health
	for i in range(phase_health_thresholds.size()):
		if health_percent <= phase_health_thresholds[i] and current_phase == i:
			current_phase += 1
			_enter_new_phase()
			break
	
	if health <= 0:
		boss_defeated.emit()
		animate_free()

func _enter_new_phase() -> void:
	match current_phase:
		1:
			transform_cooldown *= 0.8
			speed *= 1.2
		2:
			transform_cooldown *= 0.6
			speed *= 1.3
		3:
			# constant transformations
			transform_cooldown = 2.0
			speed *= 1.5



================================================
File: scenes/void_master.gd.uid
================================================
uid://dql2x17hp71vg



================================================
File: scenes/void_mimic.gd
================================================
extends VoidKeeper

var mimic_buffer: Array[Vector2] = []
var mimicking: bool = false

func _physics_process(_delta: float) -> void:
	if mimicking:
		if mimic_buffer.size() > 0:
			target = mimic_buffer.pop_front()
		else:
			mimicking = false
	else:
		mimic_buffer.append(get_tree().get_first_node_in_group("player").global_position)
		if mimic_buffer.size() > 20: 
			mimicking = true



================================================
File: scenes/void_mimic.gd.uid
================================================
uid://30xqvmhxp37



================================================
File: scenes/void_particle_component.gd
================================================
class_name VoidParticleComponent extends GPUParticles2D

@export var particle_data: ParticleComponentData


@onready var emitter: BaseEntity = get_parent()
@onready var collision_area: Area2D
signal void_consume(entity_position: Vector2)

func _ready() -> void:
	particle_data.apply_to_particles(self)
	_setup_collision_area()
	emitting = true

func _setup_collision_area() -> void:
	collision_area = Area2D.new()
	add_child(collision_area)
	
	# Create shape based on particle data
	var shape = RectangleShape2D.new()
	shape.size = particle_data.detection_area_size
	
	var collision_shape = CollisionShape2D.new()
	collision_shape.shape = shape
	collision_shape.position = particle_data.detection_area_offset
	collision_area.add_child(collision_shape)
	
	collision_area.collision_layer = 0
	collision_area.collision_mask = LayerNames.PHYSICS_2D.ENTITIES_NUM
	
	collision_area.body_entered.connect(_on_body_entered)

func _on_body_entered(body: BaseVoidEntity) -> void:
	if body is BaseEntity and body != emitter:
		void_consume.emit(body.global_position)
		if particle_data.consume_on_hit:
			body.animate_free()

func set_particle_data(data: ParticleComponentData) -> void:
	particle_data = data
	if is_inside_tree() and data:
		data.apply_to_particles(self)



================================================
File: scenes/void_particle_component.gd.uid
================================================
uid://c8xa6iwwmu13q



================================================
File: scenes/void_watcher.gd
================================================
extends VoidKeeper

@onready var path_follow: PathFollow2D = $PathFollow2D

func _physics_process(delta: float) -> void:
	path_follow.progress += speed * delta
	global_position = path_follow.global_position



================================================
File: scenes/void_watcher.gd.uid
================================================
uid://chgew7pxmm7o6



================================================
File: scenes/components/3d_to_2d_viewport.tscn
================================================
[gd_scene format=3 uid="uid://baxoh3duwwu88"]

[node name="SubViewport" type="SubViewport"]
own_world_3d = true
transparent_bg = true
size = Vector2i(100, 100)

[node name="Camera3D" type="Camera3D" parent="."]



================================================
File: scenes/components/explosion.gd
================================================
@tool
class_name ParticlesEmitter3D extends Node3D

@onready var particles_audio_3d: AudioStreamPlayer3D = %ParticlesAudio3D
@export_tool_button("Emit Particles", "GPUParticles3D") var emitting = emit_oneshot_particles
@onready var gpu_particles_node: Node3D = %GPUParticlesNode


func emit_oneshot_particles():
	for gp:GPUParticles3D in gpu_particles_node.get_children().filter(func(c): return c is GPUParticles3D):
		gp.emitting = true
	
	particles_audio_3d.play()



================================================
File: scenes/components/explosion.gd.uid
================================================
uid://delwv8raptagh



================================================
File: scenes/components/explosion_3d.tscn
================================================
[gd_scene load_steps=21 format=3 uid="uid://chxi6dqygbgb3"]

[ext_resource type="PackedScene" uid="uid://bf7ekfb0clfv1" path="res://game/scenes/components/particles_base_3d.tscn" id="1_8e6s2"]

[sub_resource type="Curve" id="Curve_8e6s2"]
_data = [Vector2(0, 0), 0.0, 0.0, 0, 0, Vector2(0.5833333, 1), 0.0, 0.0, 0, 0, Vector2(1, 0), 0.0, 0.0, 0, 0]
point_count = 3

[sub_resource type="CurveTexture" id="CurveTexture_3n1um"]
curve = SubResource("Curve_8e6s2")

[sub_resource type="Curve" id="Curve_jp3up"]
_data = [Vector2(0, 0), 0.0, 0.0, 0, 0, Vector2(0.34848487, 1), 0.0, 0.0, 0, 0, Vector2(1, 0), 0.0, 0.0, 0, 0]
point_count = 3

[sub_resource type="CurveTexture" id="CurveTexture_dunhi"]
curve = SubResource("Curve_jp3up")

[sub_resource type="ParticleProcessMaterial" id="ParticleProcessMaterial_ce702"]
emission_shape = 1
emission_sphere_radius = 1.0
direction = Vector3(0, -1, 0)
initial_velocity_min = 1.0
initial_velocity_max = 2.0
gravity = Vector3(0, 5, 0)
scale_min = 0.5
scale_max = 1.5
scale_curve = SubResource("CurveTexture_dunhi")
color = Color(0.4205018, 0.29183096, 0.14852957, 1)
alpha_curve = SubResource("CurveTexture_3n1um")

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_3m3fp"]
transparency = 1
vertex_color_use_as_albedo = true

[sub_resource type="SphereMesh" id="SphereMesh_froys"]
material = SubResource("StandardMaterial3D_3m3fp")
radial_segments = 8
rings = 8

[sub_resource type="Curve" id="Curve_v7on2"]
_data = [Vector2(0, 1), 0.0, 0.0, 0, 0, Vector2(0.6060606, 0.77528095), -0.9269663, -0.9269663, 0, 0, Vector2(1, 0), 0.0, 0.0, 0, 0]
point_count = 3

[sub_resource type="CurveTexture" id="CurveTexture_koryh"]
curve = SubResource("Curve_v7on2")

[sub_resource type="ParticleProcessMaterial" id="ParticleProcessMaterial_h5mi2"]
particle_flag_align_y = true
spread = 180.0
initial_velocity_min = 12.0
initial_velocity_max = 14.0
scale_min = 0.5
scale_max = 1.5
scale_curve = SubResource("CurveTexture_koryh")

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_q6php"]
albedo_color = Color(0.70796514, 0.71336156, 0.17819567, 1)
emission_enabled = true
emission = Color(0.6745098, 0.6745098, 0.13333334, 1)
emission_energy_multiplier = 1.5

[sub_resource type="CylinderMesh" id="CylinderMesh_73v88"]
material = SubResource("StandardMaterial3D_q6php")
top_radius = 0.1
bottom_radius = 0.0

[sub_resource type="Gradient" id="Gradient_r363r"]
offsets = PackedFloat32Array(0, 0.4056604, 1)
colors = PackedColorArray(0, 1, 0, 1, 0.39607844, 0.6627451, 0.023529412, 1, 1, 0, 0.07058822, 1)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_sqkor"]
gradient = SubResource("Gradient_r363r")

[sub_resource type="Curve" id="Curve_s8yv1"]
_limits = [1.0, 2.0, 0.0, 1.0]
_data = [Vector2(0, 2), 0.0, 0.0, 0, 0, Vector2(1, 1), 0.0, 0.0, 0, 0]
point_count = 2

[sub_resource type="CurveTexture" id="CurveTexture_a7hoa"]
curve = SubResource("Curve_s8yv1")

[sub_resource type="Curve" id="Curve_qnjl5"]
_data = [Vector2(0, 0), 0.0, 0.0, 0, 0, Vector2(0.34848487, 1), 0.0, 0.0, 0, 0, Vector2(1, 0), 0.0, 0.0, 0, 0]
point_count = 3

[sub_resource type="CurveTexture" id="CurveTexture_mbjel"]
curve = SubResource("Curve_qnjl5")

[sub_resource type="ParticleProcessMaterial" id="ParticleProcessMaterial_k2pcn"]
emission_shape = 1
emission_sphere_radius = 1.0
direction = Vector3(0, -1, 0)
spread = 90.0
initial_velocity_min = 2.0
initial_velocity_max = 4.0
gravity = Vector3(0, 5, 0)
scale_min = 0.5
scale_max = 1.5
scale_curve = SubResource("CurveTexture_mbjel")
color_ramp = SubResource("GradientTexture1D_sqkor")
emission_curve = SubResource("CurveTexture_a7hoa")

[node name="Explosion3D" instance=ExtResource("1_8e6s2")]

[node name="Smoke" type="GPUParticles3D" parent="GPUParticlesNode" index="0"]
emitting = false
amount = 12
one_shot = true
explosiveness = 1.0
fixed_fps = 60
process_material = SubResource("ParticleProcessMaterial_ce702")
draw_pass_1 = SubResource("SphereMesh_froys")

[node name="Debris" type="GPUParticles3D" parent="GPUParticlesNode" index="1"]
emitting = false
amount = 24
lifetime = 0.5
one_shot = true
explosiveness = 1.0
fixed_fps = 60
process_material = SubResource("ParticleProcessMaterial_h5mi2")
draw_pass_1 = SubResource("CylinderMesh_73v88")

[node name="Fire" type="GPUParticles3D" parent="GPUParticlesNode" index="2"]
emitting = false
amount = 12
one_shot = true
explosiveness = 1.0
fixed_fps = 60
process_material = SubResource("ParticleProcessMaterial_k2pcn")
draw_pass_1 = SubResource("SphereMesh_froys")



================================================
File: scenes/components/particles_base_3d.tscn
================================================
[gd_scene load_steps=2 format=3 uid="uid://bf7ekfb0clfv1"]

[ext_resource type="Script" uid="uid://delwv8raptagh" path="res://game/scenes/components/explosion.gd" id="1_ljr6v"]

[node name="ParticlesBase3D" type="Node3D"]
script = ExtResource("1_ljr6v")

[node name="ParticlesAudio3D" type="AudioStreamPlayer3D" parent="."]
unique_name_in_owner = true

[node name="GPUParticlesNode" type="Node3D" parent="."]
unique_name_in_owner = true



================================================
File: scenes/particles/explosion.tscn
================================================
[gd_scene load_steps=21 format=3 uid="uid://bu2olqxjs6457"]

[ext_resource type="Script" uid="uid://delwv8raptagh" path="res://game/scenes/components/explosion.gd" id="1_3n1um"]

[sub_resource type="Curve" id="Curve_3m3fp"]
_data = [Vector2(0, 0), 0.0, 0.0, 0, 0, Vector2(0.5833333, 1), 0.0, 0.0, 0, 0, Vector2(1, 0), 0.0, 0.0, 0, 0]
point_count = 3

[sub_resource type="CurveTexture" id="CurveTexture_8kl3y"]
curve = SubResource("Curve_3m3fp")

[sub_resource type="Curve" id="Curve_q6php"]
_data = [Vector2(0, 0), 0.0, 0.0, 0, 0, Vector2(0.34848487, 1), 0.0, 0.0, 0, 0, Vector2(1, 0), 0.0, 0.0, 0, 0]
point_count = 3

[sub_resource type="CurveTexture" id="CurveTexture_f77in"]
curve = SubResource("Curve_q6php")

[sub_resource type="ParticleProcessMaterial" id="ParticleProcessMaterial_a7hoa"]
emission_shape = 1
emission_sphere_radius = 1.0
direction = Vector3(0, -1, 0)
initial_velocity_min = 1.0
initial_velocity_max = 2.0
gravity = Vector3(0, 5, 0)
scale_min = 0.5
scale_max = 1.5
scale_curve = SubResource("CurveTexture_f77in")
color = Color(0.4205018, 0.29183096, 0.14852957, 1)
alpha_curve = SubResource("CurveTexture_8kl3y")

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_ejb5t"]
transparency = 1
vertex_color_use_as_albedo = true

[sub_resource type="SphereMesh" id="SphereMesh_mbjel"]
material = SubResource("StandardMaterial3D_ejb5t")
radial_segments = 8
rings = 8

[sub_resource type="Curve" id="Curve_0gpi7"]
_data = [Vector2(0, 1), 0.0, 0.0, 0, 0, Vector2(0.6060606, 0.77528095), -0.9269663, -0.9269663, 0, 0, Vector2(1, 0), 0.0, 0.0, 0, 0]
point_count = 3

[sub_resource type="CurveTexture" id="CurveTexture_we1ul"]
curve = SubResource("Curve_0gpi7")

[sub_resource type="ParticleProcessMaterial" id="ParticleProcessMaterial_dunhi"]
particle_flag_align_y = true
spread = 180.0
initial_velocity_min = 12.0
initial_velocity_max = 14.0
scale_min = 0.5
scale_max = 1.5
scale_curve = SubResource("CurveTexture_we1ul")

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_rjdr6"]
albedo_color = Color(0.70796514, 0.71336156, 0.17819567, 1)
emission_enabled = true
emission = Color(0.6745098, 0.6745098, 0.13333334, 1)
emission_energy_multiplier = 1.5

[sub_resource type="CylinderMesh" id="CylinderMesh_koryh"]
material = SubResource("StandardMaterial3D_rjdr6")
top_radius = 0.1
bottom_radius = 0.0

[sub_resource type="Gradient" id="Gradient_0gpi7"]
offsets = PackedFloat32Array(0, 0.4056604, 1)
colors = PackedColorArray(0, 1, 0, 1, 0.39607844, 0.6627451, 0.023529412, 1, 1, 0, 0.07058822, 1)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_e4pl2"]
gradient = SubResource("Gradient_0gpi7")

[sub_resource type="Curve" id="Curve_dunhi"]
_limits = [1.0, 2.0, 0.0, 1.0]
_data = [Vector2(0, 2), 0.0, 0.0, 0, 0, Vector2(1, 1), 0.0, 0.0, 0, 0]
point_count = 2

[sub_resource type="CurveTexture" id="CurveTexture_0hnfl"]
curve = SubResource("Curve_dunhi")

[sub_resource type="Curve" id="Curve_koryh"]
_data = [Vector2(0, 0), 0.0, 0.0, 0, 0, Vector2(0.34848487, 1), 0.0, 0.0, 0, 0, Vector2(1, 0), 0.0, 0.0, 0, 0]
point_count = 3

[sub_resource type="CurveTexture" id="CurveTexture_45mmb"]
curve = SubResource("Curve_koryh")

[sub_resource type="ParticleProcessMaterial" id="ParticleProcessMaterial_sqkor"]
emission_shape = 1
emission_sphere_radius = 1.0
direction = Vector3(0, -1, 0)
spread = 90.0
initial_velocity_min = 2.0
initial_velocity_max = 4.0
gravity = Vector3(0, 5, 0)
scale_min = 0.5
scale_max = 1.5
scale_curve = SubResource("CurveTexture_45mmb")
color_ramp = SubResource("GradientTexture1D_e4pl2")
emission_curve = SubResource("CurveTexture_0hnfl")

[node name="Explosion" type="Node3D"]
script = ExtResource("1_3n1um")

[node name="AudioStreamPlayer3D" type="AudioStreamPlayer3D" parent="."]

[node name="ParticlesNode" type="Node3D" parent="."]

[node name="Smoke" type="GPUParticles3D" parent="ParticlesNode"]
emitting = false
amount = 12
one_shot = true
explosiveness = 1.0
fixed_fps = 60
process_material = SubResource("ParticleProcessMaterial_a7hoa")
draw_pass_1 = SubResource("SphereMesh_mbjel")

[node name="Debris" type="GPUParticles3D" parent="ParticlesNode"]
emitting = false
amount = 24
lifetime = 0.5
one_shot = true
explosiveness = 1.0
fixed_fps = 60
process_material = SubResource("ParticleProcessMaterial_dunhi")
draw_pass_1 = SubResource("CylinderMesh_koryh")

[node name="Fire" type="GPUParticles3D" parent="ParticlesNode"]
emitting = false
amount = 12
one_shot = true
explosiveness = 1.0
fixed_fps = 60
process_material = SubResource("ParticleProcessMaterial_sqkor")
draw_pass_1 = SubResource("SphereMesh_mbjel")



================================================
File: scenes/tutorial/tutorial_manager.gd
================================================
class_name TutorialManager extends Node

signal tutorial_completed()

var tutorial_steps = [
	{
		"text": "You are a void symbiote. Move with WASD or Arrow keys.",
		"condition": "player_moved",
		"highlight": "player"
	},
	{
		"text": "Your void particles automatically consume smaller entities.",
		"condition": "enemy_consumed",
		"highlight": "enemy"
	},
	{
		"text": "You grow larger with each consumption. Size is power!",
		"condition": "size_increased",
		"show_size_indicator": true
	},
	{
		"text": "Warning: If all enemies are larger than you, quickly find a new host!",
		"condition": "understand_danger",
		"spawn_large_enemy": true
	},
	{
		"text": "Excellent! You're ready to face the void.",
		"condition": "tutorial_complete"
	}
]

var current_step: int = 0
var step_completed: bool = false

func start_tutorial() -> void:
	_show_current_step()

func _show_current_step() -> void:
	var step = tutorial_steps[current_step]
	
	UI.show_tutorial_text(step.text)
	
	if step.has("highlight"):
		_highlight_element(step.highlight)
	
	if step.has("spawn_large_enemy"):
		EnemyManager._spawn_tutorial_enemy(true)
	
	_wait_for_condition(step.condition)

func _wait_for_condition(condition: String) -> void:
	match condition:
		"player_moved":
			await player.moved
		"enemy_consumed":
			await player.consumed_enemy
		"size_increased":
			await player.size_changed
		"understand_danger":
			await get_tree().create_timer(3.0).timeout
		"tutorial_complete":
			tutorial_completed.emit()
			return
	
	_next_step()

func _next_step() -> void:
	current_step += 1
	if current_step < tutorial_steps.size():
		_show_current_step()
	else:
		tutorial_completed.emit()



================================================
File: scenes/tutorial/tutorial_manager.gd.uid
================================================
uid://cvy3eg2lm8jlk



================================================
File: scenes/tutorial/tutorial_world.tscn
================================================
[gd_scene load_steps=2 format=3 uid="uid://2vnoaw7gtgkd"]

[ext_resource type="Script" uid="uid://b5um3d2ovy0sl" path="res://game/scripts/ui.gd" id="1_m3g0s"]

[node name="TutorialWorld" type="Node2D"]

[node name="UI" type="CanvasLayer" parent="."]
script = ExtResource("1_m3g0s")

[node name="TutorialLabel" type="RichTextLabel" parent="."]
offset_right = 40.0
offset_bottom = 40.0



================================================
File: scripts/autoload.gd
================================================
## Should be set as the autoload by default
extends Node

static var tree : SceneTree

func _ready():
	tree = get_tree()



================================================
File: scripts/autoload.gd.uid
================================================
uid://ixpppcuhpbdm



================================================
File: scripts/autoload.tscn
================================================
[gd_scene load_steps=2 format=3 uid="uid://bpncxcrpvt8jl"]

[ext_resource type="Script" uid="uid://ixpppcuhpbdm" path="res://game/scripts/autoload.gd" id="1_3yjwb"]

[node name="AutoLoad" type="Node"]
script = ExtResource("1_3yjwb")



================================================
File: scripts/callable_state_machine.gd
================================================
# By firebelley's github gist (slightly modified)
class_name CallableStateMachine

var state_dictionary : Dictionary[StringName, Dictionary] = {}
var current_state: StringName

func add_states(
	normal_state_callable: Callable,
	enter_state_callable: Callable = Callable(),
	leave_state_callable: Callable = Callable()
):
	var state_name = normal_state_callable.get_method()
	state_dictionary[state_name] = {
		"normal": normal_state_callable,
		"enter": enter_state_callable,
		"leave": leave_state_callable
	}
	

func set_initial_state(state_callable: Callable):
	var state_name = state_callable.get_method()
	if state_dictionary.has(state_name):
		_set_state(state_callable)
	else:
		push_warning("No state with name " + state_name)

func update():
	if current_state != null and state_dictionary.has(current_state):
		var normal : Callable = state_dictionary[current_state].normal
		if not normal.is_null():
			normal.call()
		else:
			push_warning("Null normal callable for state: " + current_state)

func change_state(state_callable: Callable):
	if state_dictionary.has(state_callable.get_method()):
		_set_state.call_deferred(state_callable)
	else:
		push_warning("No state with name " + state_callable.get_method())

func _set_state(state_name: Callable):
	if current_state and state_dictionary.has(current_state):
		var leave_callable : Callable = state_dictionary[current_state].leave
		if not leave_callable.is_null():
			leave_callable.call()
	
	current_state = state_name.get_method()
	var enter_callable = state_dictionary[current_state].enter
	if not enter_callable.is_null():
		enter_callable.call()



================================================
File: scripts/callable_state_machine.gd.uid
================================================
uid://b3mblgo84lr1t



================================================
File: scripts/enemy_manager.gd
================================================
class_name EnemyManager extends Node

@export var keeper_particle_data: ParticleComponentData
@export var liner_particle_data: ParticleComponentData
@export var hunter_particle_data: ParticleComponentData

func _ready() -> void:
	var tween = create_tween()
	tween.tween_callback(_spawn_enemy.bind("res://game/scenes/void_keeper.tscn", Vector2(100, 100))).set_delay(1)
	tween.tween_callback(_spawn_enemy.bind("res://game/scenes/void_liner.tscn", Vector2(150, 100))).set_delay(1)
	tween.tween_callback(_spawn_enemy.bind("res://game/scenes/void_keeper.tscn", Vector2(300, 100))).set_delay(1)
	tween.tween_callback(_spawn_enemy.bind("res://game/scenes/void_liner.tscn", Vector2(450, 100))).set_delay(1)

func _spawn_enemy(scene_path: String, pos: Vector2) -> void:
	var spawn_tween = get_tree().create_tween().set_trans(Tween.TRANS_SINE).set_parallel()
	var enemy = load(scene_path).instantiate()
	spawn_tween.tween_property(enemy, "scale", Vector2.ONE, 0.2).from(Vector2.ZERO)
	enemy.global_position = pos
	spawn_tween.tween_callback(add_child.bind(enemy))



================================================
File: scripts/enemy_manager.gd.uid
================================================
uid://bxfwyvw3ntd0m



================================================
File: scripts/particle_component_data.gd
================================================
class_name ParticleComponentData extends Resource

@export var process_material : ParticleProcessMaterial

# Basic emission settings
@export_group("Emission")
@export var emission_amount: int = 8
@export var emission_lifetime: float = 2.0
@export var emission_shape: ParticleProcessMaterial.EmissionShape = ParticleProcessMaterial.EMISSION_SHAPE_POINT
@export var emission_sphere_radius: float = 10.0
@export var emission_rect_extents: Vector2 = Vector2(10, 10)

# Movement settings
@export_group("Movement (handle in particle process material)")
@export var direction: Vector2 = Vector2(0, -1)
@export var spread: float = 0.0
@export var initial_velocity_min: float = 300.0
@export var initial_velocity_max: float = 300.0
@export var angular_velocity_min: float = -180.0
@export var angular_velocity_max: float = 180.0
@export var gravity: Vector2 = Vector2.ZERO
@export var linear_accel_min: float = 0.0
@export var linear_accel_max: float = 0.0
@export var radial_accel_min: float = 0.0
@export var radial_accel_max: float = 0.0
@export var tangential_accel_min: float = 0.0
@export var tangential_accel_max: float = 0.0
@export var damping_min: float = 0.0
@export var damping_max: float = 0.0

# Visual settings 
@export_group("Visual (handle in ParticleProcessMaterial)")
@export var texture: Texture2D
@export var scale_min: float = 1.0
@export var scale_max: float = 1.0
@export var scale_curve: Curve
@export var color_ramp: Gradient
@export var color_initial_ramp: Gradient
@export var hue_variation_min: float = 0.0
@export var hue_variation_max: float = 0.0

# Collision settings
@export_group("Collision")
@export var collision_enabled: bool = true
@export var collision_mode: ParticleProcessMaterial.CollisionMode = ParticleProcessMaterial.COLLISION_RIGID
@export var collision_friction: float = 0.0
@export var collision_bounce: float = 0.0
@export var collision_use_scale: bool = true

# Detection settings (for our custom detection)
@export_group("Detection")
@export var detection_radius: float = 8.0
@export var detection_interval: float = 0.1
@export var consume_on_hit: bool = true
@export var detection_area_size: Vector2 = Vector2(100, 400)
@export var detection_area_offset: Vector2 = Vector2(0, -200)

func apply_to_particles(particles: GPUParticles2D) -> void:
	particles.amount = emission_amount
	particles.lifetime = emission_lifetime
	particles.texture = texture
	
	var process_mat = particles.process_material as ParticleProcessMaterial
	if not process_mat:
		process_mat = ParticleProcessMaterial.new()
		particles.process_material = process_mat
	
	# Apply emission settings
	process_mat.emission_shape = emission_shape
	process_mat.emission_sphere_radius = emission_sphere_radius
	process_mat.emission_box_extents = Vector3(emission_rect_extents.x, emission_rect_extents.y, 0)
	
	# Apply movement settings
	process_mat.direction = Vector3(direction.x, direction.y, 0)
	process_mat.spread = spread
	process_mat.initial_velocity_min = initial_velocity_min
	process_mat.initial_velocity_max = initial_velocity_max
	process_mat.angular_velocity_min = angular_velocity_min
	process_mat.angular_velocity_max = angular_velocity_max
	process_mat.gravity = Vector3(gravity.x, gravity.y, 0)
	process_mat.linear_accel_min = linear_accel_min
	process_mat.linear_accel_max = linear_accel_max
	process_mat.radial_accel_min = radial_accel_min
	process_mat.radial_accel_max = radial_accel_max
	process_mat.tangential_accel_min = tangential_accel_min
	process_mat.tangential_accel_max = tangential_accel_max
	process_mat.damping_min = damping_min
	process_mat.damping_max = damping_max
	
	# Apply visual settings
	process_mat.scale_min = scale_min
	process_mat.scale_max = scale_max
	if scale_curve:
		process_mat.scale_curve = scale_curve
	if color_ramp:
		process_mat.color_ramp = color_ramp
	if color_initial_ramp:
		process_mat.color_initial_ramp = color_initial_ramp
	process_mat.hue_variation_min = hue_variation_min
	process_mat.hue_variation_max = hue_variation_max
	
	# Apply collision settings
	if collision_enabled:
		process_mat.collision_mode = collision_mode
		process_mat.collision_friction = collision_friction
		process_mat.collision_bounce = collision_bounce
		process_mat.collision_use_scale = collision_use_scale



================================================
File: scripts/particle_component_data.gd.uid
================================================
uid://xnufu1pes318



================================================
File: scripts/player_input_controller.gd
================================================
class_name PlayerInputController extends Node2D

signal direction_changed(direction: Vector2)

func _physics_process(_delta: float) -> void:
	var direction := Input.get_vector("ui_left", "ui_right", "ui_up", "ui_down")
	
	direction_changed.emit(direction)



================================================
File: scripts/player_input_controller.gd.uid
================================================
uid://ktmfubc7ljmr



================================================
File: scripts/reusable_states.gd
================================================
extends Node



================================================
File: scripts/reusable_states.gd.uid
================================================
uid://eihonvkahnpp



================================================
File: scripts/ui.gd
================================================
class_name UI extends CanvasLayer

static var I : UI

func _init() -> void:
	I = self

func _show_tutorial_text():
	WeakRef



================================================
File: scripts/ui.gd.uid
================================================
uid://b5um3d2ovy0sl



================================================
File: scripts/velocity_component.gd
================================================
class_name VelocityComponent extends Node

# Leave the comments to the other repo

var velocity: Vector2

var _knockback_vector := Vector2.ZERO
var _knockback_timer := 0.0
var _is_knocked_back := false


func _physics_process(delta: float) -> void:
	var body: CharacterBody2D = get_parent()

	if _is_knocked_back:
		_knockback_timer -= delta
		if _knockback_timer <= 0.0:
			_is_knocked_back = false
			velocity = Vector2.ZERO
		else:
			body.velocity = _knockback_vector
			body.move_and_slide()
			self.velocity = body.velocity
			return

	body.velocity = velocity
	body.move_and_slide()
	self.velocity = body.velocity


func accelerate_to(direction: Vector2, speed: float = 100) -> void:
	var adjusted_speed = minf(speed, speed / (get_parent().size/100))
	velocity = velocity.lerp(direction.normalized() * speed, 1 - exp(-50 * get_physics_process_delta_time()))

func stop() -> void:
	velocity = velocity.lerp(Vector2.ZERO, 1 - exp(-50 * get_physics_process_delta_time()))

func apply_knockback(force: Vector2, duration: float = 0.2) -> void:
	if force != Vector2.ZERO:
		_knockback_vector = force
		_knockback_timer = duration
		_is_knocked_back = true



================================================
File: scripts/velocity_component.gd.uid
================================================
uid://dqssv5ddlmmkv



================================================
File: scripts/wave_manager.gd
================================================
class_name WaveManager extends Node

signal wave_started(wave_number: int)
signal wave_completed(wave_number: int)
signal milestone_reached(milestone: String)
signal game_over()
signal victory()

@export var enemy_scenes: Dictionary = {
	"void_keeper": preload("res://game/scenes/void_keeper.tscn"),
	"void_liner": preload("res://game/scenes/void_liner.tscn"),
	"void_hunter": preload("res://game/scenes/void_hunter.tscn"),
	"void_police": preload("res://game/scenes/void_police.tscn"),
	"void_master": preload("res://game/scenes/void_master.tscn")
}

var current_wave: int = 0
var enemies_spawned: int = 0
var player: Player
var spawn_timer: Timer
var active_enemies: Array[BaseEntity] = []

# Size thresholds for enemy spawn condn.
const SIZE_THRESHOLDS = {
	"void_keeper": 50,
	"void_liner": 80,
	"void_hunter": 150,
	"void_police": 250,
	"void_master": 500
}

# Going with waves coz no time for heavy roguelike elements
var wave_configs = [
	# Tutorial
	{
		"enemies": {"void_keeper": 1},
		"spawn_delay": 0,
		"message": "You are a symbiote. Consume smaller entities to grow.",
		"is_tutorial": true
	},
	# Wave 1-5: Introduction
	{
		"enemies": {"void_keeper": 3, "void_liner": 1},
		"spawn_delay": 2.0,
		"message": "The void stirs..."
	},
	{
		"enemies": {"void_keeper": 4, "void_liner": 2},
		"spawn_delay": 1.8
	},
	{
		"enemies": {"void_keeper": 3, "void_liner": 3},
		"spawn_delay": 1.6
	},
	{
		"enemies": {"void_keeper": 2, "void_liner": 4},
		"spawn_delay": 1.5
	},
	{
		"enemies": {"void_keeper": 5, "void_liner": 5},
		"spawn_delay": 1.4,
		"milestone": "void_hunter_unlock",
		"message": "The void hunters have noticed your presence..."
	},
	# Wave 6-10: Hunters appear
	{
		"enemies": {"void_keeper": 3, "void_liner": 3, "void_hunter": 1},
		"spawn_delay": 1.5
	},
]

func _ready() -> void:
	player = get_tree().get_first_node_in_group("player")
	spawn_timer = Timer.new()
	add_child(spawn_timer)
	spawn_timer.timeout.connect(_spawn_next_enemy)
	
	# Start with tutorial
	start_wave(0)

func start_wave(wave_number: int) -> void:
	current_wave = wave_number
	enemies_spawned = 0
	
	if wave_number >= wave_configs.size():
		# Generate procedural waves after predefined ones
		_generate_procedural_wave(wave_number)
	
	var config = _get_wave_config(wave_number)
	
	if config.has("message"):
		_show_message(config.message)
	
	if config.has("is_tutorial"):
		_start_tutorial()
	else:
		wave_started.emit(wave_number)
		_start_spawning(config)

func _start_tutorial() -> void:
	# Spawn a single weak enemy for tutorial
	var tutorial_enemy = enemy_scenes["void_keeper"].instantiate()
	tutorial_enemy.global_position = Vector2(400, 300)
	tutorial_enemy.size = 30  # Make it smaller than player
	get_parent().add_child(tutorial_enemy)
	active_enemies.append(tutorial_enemy)
	
	_show_tutorial_ui()

func _show_tutorial_ui() -> void:
	var tutorial_text = """
    Welcome, Symbiote.
    
    You control void entities by consuming them.
    - Move with WASD/Arrow keys
    - Your void particles will consume smaller entities
    - Grow larger by consuming enemies
    - If all enemies are larger than you, find a new host quickly!
    
    Consume the void keeper to begin...
	"""
	# Show tutorial UI

func _start_spawning(config: Dictionary) -> void:
	spawn_timer.wait_time = config.get("spawn_delay", 2.0)
	spawn_timer.start()

func _spawn_next_enemy() -> void:
	var config = _get_wave_config(current_wave)
	var remaining_enemies = _get_remaining_enemies(config)
	
	if remaining_enemies.is_empty():
		spawn_timer.stop()
		_check_wave_completion()
		return
	
	var enemy_type = _choose_enemy_type(remaining_enemies)
	_spawn_enemy(enemy_type)

func _choose_enemy_type(available_types: Array) -> String:
	var valid_types = available_types.filter(func(type): 
		return player.size >= SIZE_THRESHOLDS.get(type, 0)
	)
	
	if valid_types.is_empty():
		return available_types[0]
	
	return valid_types[randi() % valid_types.size()]

func _spawn_enemy(enemy_type: String) -> void:
	var enemy = enemy_scenes[enemy_type].instantiate()
	
	var base_size = _get_base_size(enemy_type)
	var size_variance = randf_range(0.8, 1.2)
	enemy.size = base_size * size_variance * (1 + current_wave * 0.1)
	
	enemy.global_position = _get_spawn_position()
	
	get_parent().add_child(enemy)
	active_enemies.append(enemy)
	enemies_spawned += 1
	
	enemy.tree_exiting.connect(_on_enemy_died.bind(enemy))

func _get_base_size(enemy_type: String) -> float:
	match enemy_type:
		"void_keeper": return 60
		"void_liner": return 80
		"void_hunter": return 120
		"void_police": return 180
		"void_master": return 300
		_: return 100

func _get_spawn_position() -> Vector2:
	var viewport_size = get_viewport().size
	var side = randi() % 4
	
	match side:
		0: return Vector2(randf() * viewport_size.x, -50)  # Top
		1: return Vector2(viewport_size.x + 50, randf() * viewport_size.y)  # Right
		2: return Vector2(randf() * viewport_size.x, viewport_size.y + 50)  # Bottom
		_: return Vector2(-50, randf() * viewport_size.y)  # Left

func _on_enemy_died(enemy: BaseEntity) -> void:
	active_enemies.erase(enemy)
	_check_wave_completion()
	_check_game_over()

func _check_wave_completion() -> void:
	if active_enemies.is_empty() and spawn_timer.is_stopped():
		wave_completed.emit(current_wave)
		
		# Check for milestones
		var config = _get_wave_config(current_wave)
		if config.has("milestone"):
			milestone_reached.emit(config.milestone)
		
		# Start next wave after delay
		await get_tree().create_timer(3.0).timeout
		start_wave(current_wave + 1)

func _check_game_over() -> void:
	if not player:
		return
	
	var can_possess = active_enemies.any(func(enemy): 
		return enemy.size < player.size
	)
	
	if not can_possess and active_enemies.size() > 0:
		# grace period
		await get_tree().create_timer(2.0).timeout
		
		can_possess = active_enemies.any(func(enemy): 
			return enemy.size < player.size
		)
		
		if not can_possess:
			game_over.emit()

func _generate_procedural_wave(wave_number: int) -> Dictionary:
	# Generate increasingly difficult waves
	var config = {}
	var difficulty = wave_number - wave_configs.size()
	
	# Base enemy counts
	var keeper_count = max(0, 5 - difficulty / 5)
	var liner_count = 3 + difficulty / 3
	var hunter_count = difficulty / 5
	var police_count = max(0, difficulty / 10 - 2)
	
	config["enemies"] = {}
	if keeper_count > 0: config["enemies"]["void_keeper"] = keeper_count
	if liner_count > 0: config["enemies"]["void_liner"] = liner_count
	if hunter_count > 0: config["enemies"]["void_hunter"] = hunter_count
	if police_count > 0: config["enemies"]["void_police"] = police_count
	
	if wave_number % 10 == 0 and wave_number >= 20:
		config["enemies"]["void_master"] = 1
		config["message"] = "The Void Master approaches..."
	
	config["spawn_delay"] = max(0.5, 2.0 - difficulty * 0.1)
	
	return config



================================================
File: scripts/wave_manager.gd.uid
================================================
uid://x6bqc15h6gaq



================================================
File: scripts/world_data.gd
================================================
class_name WorldData extends Node



================================================
File: scripts/world_data.gd.uid
================================================
uid://c50vvaxi2hxjh


